using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Discore
{
    public class DiscordPartialMessage : DiscordIdEntity
    {
        /// <summary>
        /// Gets the ID of the channel this message is in.
        /// </summary>
        public Snowflake ChannelId { get; }
        /// <summary>
        /// Gets the ID of the guild this message is in.
        /// </summary>
        public Snowflake? GuildId { get; }
        /// <summary>
        /// Gets the author of this message.
        /// </summary>
        public DiscordUser? Author { get; }
        /// <summary>
        /// If this message originated from a guild, gets the member properties of the author.
        /// </summary>
        public DiscordMessageMember? Member { get; }
        /// <summary>
        /// Gets the contents of this message.
        /// </summary>
        public string? Content { get; }
        /// <summary>
        /// Gets the time this message was first sent.
        /// </summary>
        public DateTime? Timestamp { get; }
        /// <summary>
        /// Gets the time of the last edit to this message.
        /// </summary>
        public DateTime? EditedTimestamp { get; }
        /// <summary>
        /// Gets whether or not this message was sent with the /tts command.
        /// </summary>
        public bool? TextToSpeech { get; }
        /// <summary>
        /// Gets whether or not this message mentioned everyone via @everyone.
        /// </summary>
        public bool? MentionEveryone { get; }
        /// <summary>
        /// Gets a list of all user-specific mentions in this message.
        /// </summary>
        public IReadOnlyList<DiscordUser>? Mentions { get; }
        /// <summary>
        /// Gets a list of all the IDs of mentioned roles in this message.
        /// </summary>
        public IReadOnlyList<Snowflake>? MentionedRoleIds { get; }
        /// <summary>
        /// Gets a list of all channels mentioned in this message.
        /// May be null.
        /// <para/>
        /// Note: This will only ever be set for crossposted messages.
        /// </summary>
        public IReadOnlyList<DiscordChannelMention>? MentionedChannels { get; }
        /// <summary>
        /// Gets a list of all attachments in this message.
        /// </summary>
        public IReadOnlyList<DiscordAttachment>? Attachments { get; }
        /// <summary>
        /// Gets a list of all embedded attachments in this message.
        /// </summary>
        public IReadOnlyList<DiscordEmbed>? Embeds { get; }
        /// <summary>
        /// Gets a list of all reactions to this message.
        /// </summary>
        public IReadOnlyList<DiscordReaction>? Reactions { get; }
        /// <summary>
        /// Used for validating if a message was sent.
        /// </summary>
        public Snowflake? Nonce { get; }
        /// <summary>
        /// Gets whether or not this message is pinned in the containing channel.
        /// </summary>
        public bool? IsPinned { get; }
        /// <summary>
        /// If this message was generated by a webhook, gets the ID of that webhook.
        /// </summary>
        public Snowflake? WebhookId { get; }
        /// <summary>
        /// Gets the type of message.
        /// </summary>
        public DiscordMessageType? Type { get; }
        /// <summary>
        /// Gets the activity information for a Rich Presence-related chat message.
        /// </summary>
        public DiscordMessageActivity? Activity { get; }
        /// <summary>
        /// Gets the application information for a Rich Persence-related chat message.
        /// </summary>
        public DiscordMessageApplication? Application { get; }
        /// <summary>
        /// Gets the reference data sent with crossposted messages.
        /// </summary>
        public DiscordMessageReference? MessageReference { get; }
        /// <summary>
        /// Flags describing extra features of the message.
        /// </summary>
        public DiscordMessageFlags? Flags { get; }

        // TODO: add guild_id, mentions.member, stickers, referenced_message, interaction

        internal DiscordPartialMessage(JsonElement json)
            : base(json)
        {
            ChannelId = json.GetProperty("channel_id").GetSnowflake();
            GuildId = json.GetPropertyOrNull("guild_id")?.GetSnowflake();
            Content = json.GetPropertyOrNull("content")?.GetString();
            Timestamp = json.GetPropertyOrNull("timestamp")?.GetDateTimeOrNull();
            EditedTimestamp = json.GetPropertyOrNull("edited_timestamp")?.GetDateTimeOrNull();
            TextToSpeech = json.GetPropertyOrNull("tts")?.GetBooleanOrNull();
            MentionEveryone = json.GetPropertyOrNull("mention_everyone")?.GetBooleanOrNull();
            Nonce = json.GetPropertyOrNull("nonce")?.GetSnowflakeOrNull();
            IsPinned = json.GetPropertyOrNull("pinned")?.GetBooleanOrNull();
            WebhookId = json.GetPropertyOrNull("webhook_id")?.GetSnowflake();
            Type = (DiscordMessageType?)json.GetPropertyOrNull("type")?.GetInt32OrNull();
            Flags = (DiscordMessageFlags?)json.GetPropertyOrNull("flags")?.GetInt32OrNull();

            // Author
            JsonElement? authorJson = json.GetPropertyOrNull("author");
            Author = authorJson == null ? null : new DiscordUser(authorJson.Value, isWebhookUser: WebhookId != null);

            // Member
            JsonElement? memberJson = json.GetPropertyOrNull("member");
            Member = memberJson == null ? null : new DiscordMessageMember(memberJson.Value);

            // Activity
            JsonElement? activityJson = json.GetPropertyOrNull("activity");
            Activity = activityJson == null ? null : new DiscordMessageActivity(activityJson.Value);

            // Application
            JsonElement? applicationJson = json.GetPropertyOrNull("application");
            Application = applicationJson == null ? null : new DiscordMessageApplication(applicationJson.Value);

            // Message reference
            JsonElement? messageReferenceJson = json.GetPropertyOrNull("message_reference");
            MessageReference = messageReferenceJson == null ? null : new DiscordMessageReference(messageReferenceJson.Value);

            // Mentions
            JsonElement? mentionsJson = json.GetPropertyOrNull("mentions");

            if (mentionsJson != null)
            {
                JsonElement _mentionsJson = mentionsJson.Value;
                var mentions = new DiscordUser[_mentionsJson.GetArrayLength()];

                for (int i = 0; i < mentions.Length; i++)
                    mentions[i] = new DiscordUser(_mentionsJson[i], isWebhookUser: false);

                Mentions = mentions;
            }

            // Mentioned roles
            JsonElement? mentionRolesJson = json.GetPropertyOrNull("mention_roles");
  
            if (mentionRolesJson != null)
            {
                JsonElement _mentionRolesJson = mentionRolesJson.Value;
                var mentionRoles = new Snowflake[_mentionRolesJson.GetArrayLength()];

                for (int i = 0; i < mentionRoles.Length; i++)
                    mentionRoles[i] = _mentionRolesJson[i].GetSnowflake();

                MentionedRoleIds = mentionRoles;
            }

            // Mentioned channels
            JsonElement? mentionChannelsJson = json.GetPropertyOrNull("mention_channels");

            if (mentionChannelsJson != null)
            {
                JsonElement _mentionChannelsJson = mentionChannelsJson.Value;
                var mentionChannels = new DiscordChannelMention[_mentionChannelsJson.GetArrayLength()];

                for (int i = 0; i < mentionChannels.Length; i++)
                    mentionChannels[i] = new DiscordChannelMention(_mentionChannelsJson[i]);

                MentionedChannels = mentionChannels;
            }

            // Attachments
            JsonElement? attachmentsJson = json.GetPropertyOrNull("attachments");

            if (attachmentsJson != null)
            {
                JsonElement _attachmentsJson = attachmentsJson.Value;
                var attachments = new DiscordAttachment[_attachmentsJson.GetArrayLength()];

                for (int i = 0; i < attachments.Length; i++)
                    attachments[i] = new DiscordAttachment(_attachmentsJson[i]);

                Attachments = attachments;
            }

            // Embeds
            JsonElement? embedsJson = json.GetPropertyOrNull("embeds");

            if (embedsJson != null)
            {
                JsonElement _embedsJson = embedsJson.Value;
                var embeds = new DiscordEmbed[_embedsJson.GetArrayLength()];

                for (int i = 0; i < embeds.Length; i++)
                    embeds[i] = new DiscordEmbed(_embedsJson[i]);

                Embeds = embeds;
            }

            // Reactions
            JsonElement? reactionsJson = json.GetPropertyOrNull("reactions");

            if (reactionsJson != null)
            {
                JsonElement _reactionsJson = reactionsJson.Value;
                var reactions = new DiscordReaction[_reactionsJson.GetArrayLength()];

                for (int i = 0; i < reactions.Length; i++)
                    reactions[i] = new DiscordReaction(_reactionsJson[i]);

                Reactions = reactions;
            }
        }
    }
}
